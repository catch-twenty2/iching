import random

question = str(input("Type your question to Oracle: "))

sixth = random.randint(6,9)
fifth = random.randint(6,9)
fourth = random.randint(6,9)
third = random.randint(6,9)
second = random.randint(6,9)
first = random.randint(6,9)

zbior = [sixth, fifth, fourth, third, second, first]

def hex0(zbior):
    for linie in zbior:
        if linie == 9:
            print("_o_")
        elif linie == 8:
            print("---")
        elif linie == 7:
            print("___")
        elif linie == 6:
            print("-x-")
        else:
            print("error")
print("the original hexagram is:")
hex0(zbior)

print("\nAfter transforming of changing lines The First Hexagram will look as:")
def hex1(zbior):
    for linie in zbior:
        if linie == 9:
            print("___")
        elif linie == 8:
            print("---")
        elif linie == 7:
            print("___")
        elif linie == 6:
            print("---")
        else:
            print("error")
hex1(zbior)

print("\nAfter transforming of changing lines The 2nd Hexagram will look as:")
def hex2(zbior):
    for linie in zbior:
        if linie == 9:
            print("---")
        elif linie == 8:
            print("---")
        elif linie == 7:
            print("___")
        elif linie == 6:
            print("___")
        else:
            print("error")
hex2(zbior)

#TODO - CHANGING LINES
print(f"Changing lines are following:")
def change_line(zbior):
    for linie in zbior:
        if 6<linie<9:
#             return [zbior] 
            print(f"niezmienne")
        else:
            print(linie)
change_line(zbior)



#finalization
print(f"\nyour question was:" +question+"\n")

#test
print("test to verify:","\n",sixth,"\n",fifth,"\n",fourth,"\n",third,"\n",second,"\n",first)


#NEW VERSION

def convert_value(value):
    if value == 6:
        return 8
    elif value == 7:
        return 9
    elif value == 8:
        return 8
    elif value == 9:
        return 9
    else:
        return value

    
sixther = convert_value(sixth)
fifther = convert_value(fifth)
fourther = convert_value(fourth)
thirder = convert_value(third)
seconder = convert_value(second)
firster = convert_value(first)

print("\n" "Converted values:")
print("sixther:", sixther)
print("fifther:", fifther)
print("fourther:", fourther)
print("thirder:", thirder)
print("seconder:", seconder)
print("firster:", firster)

#FINDING FIRST HEXAGRAM VALUE
def find_hex(sixther, fifther, fourther, thirder, seconder, firster):
    hexagram_data = [
        ("hex 1", 9, 9, 9, 9, 9, 9),
        ("hex 2", 8, 8, 8, 8, 8, 8),
        ("hex 3", 8, 9, 8, 8, 8, 9),
        ("hex 4", 9, 8, 8, 8, 9, 8),
        ("hex 5", 8, 9, 8, 9, 9, 9),
        ("hex 6", 9, 9, 9, 8, 9, 8),
        ("hex 7", 8, 8, 8, 8, 9, 8),
        ("hex 8", 8, 9, 8, 8, 8, 8),
        ("hex 9", 9, 9, 8, 9, 9, 9),
        ("hex 10", 9, 9, 9, 8, 9, 9),
        ("hex 11", 8, 8, 8, 9, 9, 9),
        ("hex 12", 9, 9, 9, 8, 8, 8),
        ("hex 13", 9, 9, 9, 9, 8, 9),
        ("hex 14", 9, 8, 9, 9, 9, 9),
        ("hex 15", 8, 8, 8, 9, 8, 8),
        ("hex 16", 8, 8, 9, 8, 8, 8),
        ("hex 17", 8, 9, 9, 8, 8, 9),
        ("hex 18", 9, 8, 8, 9, 9, 8),
        ("hex 19", 8, 8, 8, 8, 9, 9),
        ("hex 20", 9, 9, 8, 8, 8, 8),
        ("hex 21", 9, 8, 9, 8, 8, 9),
        ("hex 22", 9, 8, 8, 9, 8, 9),
        ("hex 23", 9, 8, 8, 8, 8, 8),
        ("hex 24", 8, 8, 8, 8, 8, 9),
        ("hex 25", 9, 9, 9, 8, 8, 9),
        ("hex 26", 9, 8, 8, 9, 9, 9),
        ("hex 27", 9, 8, 8, 8, 8, 9),
        ("hex 28", 8, 9, 9, 9, 9, 8),
        ("hex 29", 8, 9, 8, 8, 9, 8),
        ("hex 30", 9, 8, 9, 9, 8, 9),
        ("hex 31", 8, 9, 9, 9, 8, 8),
        ("hex 32", 8, 8, 9, 9, 9, 8),
        ("hex 33", 9, 9, 9, 9, 8, 8),
        ("hex 34", 8, 8, 9, 9, 9, 9),
        ("hex 35", 9, 8, 9, 8, 8, 8),
        ("hex 36", 8, 8, 8, 9, 8, 9),
        ("hex 37", 9, 9, 8, 9, 8, 9),
        ("hex 38", 9, 8, 9, 8, 9, 9),
        ("hex 39", 8, 9, 8, 9, 8, 8),
        ("hex 40", 8, 8, 9, 8, 9, 8),
        ("hex 41", 9, 8, 8, 8, 9, 9),
        ("hex 42", 9, 9, 8, 8, 8, 9),
        ("hex 43", 8, 9, 9, 9, 9, 9),
        ("hex 44", 9, 9, 9, 9, 9, 8),
        ("hex 45", 8, 9, 9, 8, 8, 8),
        ("hex 46", 8, 8, 8, 9, 9, 8),
        ("hex 47", 8, 9, 9, 8, 9, 8),
        ("hex 48", 8, 9, 8, 9, 9, 8),
        ("hex 49", 8, 9, 9, 9, 8, 9),
        ("hex 50", 9, 8, 9, 9, 9, 8),
        ("hex 51", 8, 8, 9, 8, 8, 9),
        ("hex 52", 9, 8, 8, 9, 8, 8),
        ("hex 53", 9, 9, 8, 9, 8, 8),
        ("hex 54", 8, 8, 9, 8, 9, 9),
        ("hex 55", 8, 8, 9, 9, 8, 9),
        ("hex 56", 9, 8, 9, 9, 8, 8),
        ("hex 57", 9, 9, 8, 9, 9, 8),
        ("hex 58", 8, 9, 9, 8, 9, 9),
        ("hex 59", 9, 9, 8, 8, 9, 8),
        ("hex 60", 8, 9, 8, 8, 9, 9),
        ("hex 61", 9, 9, 8, 8, 9, 9),
        ("hex 62", 8, 8, 9, 9, 8, 8),
        ("hex 63", 8, 9, 8, 9, 8, 9),
        ("hex 64", 9, 8, 9, 8, 9, 8),
    ]
    
    for hexagram in hexagram_data:
        if (
            hexagram[1] == sixther
            and hexagram[2] == fifther
            and hexagram[3] == fourther
            and hexagram[4] == thirder
            and hexagram[5] == seconder
            and hexagram[6] == firster
        ):
            return hexagram[0]
    
    return "Not found"

result = find_hex(sixther, fifther, fourther, thirder, seconder, firster)
print(f"Result: {result}")




# now showing 2nd HEx

# 9 znaczy ciagla przechodzi w przerywana czyli 8
# 8 to przerywana bez zmian czyli 8
# 7 to ciagla, czyli 9
# 6 to przerywana przechodzi w ciagla czyli 9


def convert_value_2nd(value):
    if value == 6:
        return 9
    elif value == 7:
        return 9
    elif value == 8:
        return 8
    elif value == 9:
        return 8
    else:
        return value

    
sixtherst = convert_value_2nd(sixth)
fiftherst = convert_value_2nd(fifth)
fourtherst = convert_value_2nd(fourth)
thirderst = convert_value_2nd(third)
seconderst = convert_value_2nd(second)
firsterst = convert_value_2nd(first)

print("\n" "Converted values of 2nd Hex:")
print("sixtherst:", sixtherst)
print("fiftherst:", fiftherst)
print("fourtherst:", fourtherst)
print("thirderst:", thirderst)
print("seconderst:", seconderst)
print("firsterst:", firsterst)


#FINDING FIRST HEXAGRAM VALUE
def find_hex2(sixtherst, fiftherst, fourtherst, thirderst, seconderst, firsterst):
    hexagram_data = [
        ("hex 1", 9, 9, 9, 9, 9, 9),
        ("hex 2", 8, 8, 8, 8, 8, 8),
        ("hex 3", 8, 9, 8, 8, 8, 9),
        ("hex 4", 9, 8, 8, 8, 9, 8),
        ("hex 5", 8, 9, 8, 9, 9, 9),
        ("hex 6", 9, 9, 9, 8, 9, 8),
        ("hex 7", 8, 8, 8, 8, 9, 8),
        ("hex 8", 8, 9, 8, 8, 8, 8),
        ("hex 9", 9, 9, 8, 9, 9, 9),
        ("hex 10", 9, 9, 9, 8, 9, 9),
        ("hex 11", 8, 8, 8, 9, 9, 9),
        ("hex 12", 9, 9, 9, 8, 8, 8),
        ("hex 13", 9, 9, 9, 9, 8, 9),
        ("hex 14", 9, 8, 9, 9, 9, 9),
        ("hex 15", 8, 8, 8, 9, 8, 8),
        ("hex 16", 8, 8, 9, 8, 8, 8),
        ("hex 17", 8, 9, 9, 8, 8, 9),
        ("hex 18", 9, 8, 8, 9, 9, 8),
        ("hex 19", 8, 8, 8, 8, 9, 9),
        ("hex 20", 9, 9, 8, 8, 8, 8),
        ("hex 21", 9, 8, 9, 8, 8, 9),
        ("hex 22", 9, 8, 8, 9, 8, 9),
        ("hex 23", 9, 8, 8, 8, 8, 8),
        ("hex 24", 8, 8, 8, 8, 8, 9),
        ("hex 25", 9, 9, 9, 8, 8, 9),
        ("hex 26", 9, 8, 8, 9, 9, 9),
        ("hex 27", 9, 8, 8, 8, 8, 9),
        ("hex 28", 8, 9, 9, 9, 9, 8),
        ("hex 29", 8, 9, 8, 8, 9, 8),
        ("hex 30", 9, 8, 9, 9, 8, 9),
        ("hex 31", 8, 9, 9, 9, 8, 8),
        ("hex 32", 8, 8, 9, 9, 9, 8),
        ("hex 33", 9, 9, 9, 9, 8, 8),
        ("hex 34", 8, 8, 9, 9, 9, 9),
        ("hex 35", 9, 8, 9, 8, 8, 8),
        ("hex 36", 8, 8, 8, 9, 8, 9),
        ("hex 37", 9, 9, 8, 9, 8, 9),
        ("hex 38", 9, 8, 9, 8, 9, 9),
        ("hex 39", 8, 9, 8, 9, 8, 8),
        ("hex 40", 8, 8, 9, 8, 9, 8),
        ("hex 41", 9, 8, 8, 8, 9, 9),
        ("hex 42", 9, 9, 8, 8, 8, 9),
        ("hex 43", 8, 9, 9, 9, 9, 9),
        ("hex 44", 9, 9, 9, 9, 9, 8),
        ("hex 45", 8, 9, 9, 8, 8, 8),
        ("hex 46", 8, 8, 8, 9, 9, 8),
        ("hex 47", 8, 9, 9, 8, 9, 8),
        ("hex 48", 8, 9, 8, 9, 9, 8),
        ("hex 49", 8, 9, 9, 9, 8, 9),
        ("hex 50", 9, 8, 9, 9, 9, 8),
        ("hex 51", 8, 8, 9, 8, 8, 9),
        ("hex 52", 9, 8, 8, 9, 8, 8),
        ("hex 53", 9, 9, 8, 9, 8, 8),
        ("hex 54", 8, 8, 9, 8, 9, 9),
        ("hex 55", 8, 8, 9, 9, 8, 9),
        ("hex 56", 9, 8, 9, 9, 8, 8),
        ("hex 57", 9, 9, 8, 9, 9, 8),
        ("hex 58", 8, 9, 9, 8, 9, 9),
        ("hex 59", 9, 9, 8, 8, 9, 8),
        ("hex 60", 8, 9, 8, 8, 9, 9),
        ("hex 61", 9, 9, 8, 8, 9, 9),
        ("hex 62", 8, 8, 9, 9, 8, 8),
        ("hex 63", 8, 9, 8, 9, 8, 9),
        ("hex 64", 9, 8, 9, 8, 9, 8),
    ]
    
    for hexagramm in hexagram_data:
        if (
            hexagramm[1] == sixtherst
            and hexagramm[2] == fiftherst
            and hexagramm[3] == fourtherst
            and hexagramm[4] == thirderst
            and hexagramm[5] == seconderst
            and hexagramm[6] == firsterst
        ):
            return hexagramm[0]
    
    return "Not found"

result2 = find_hex2(sixtherst, fiftherst, fourtherst, thirderst, seconderst, firsterst)
print(f"Result: {result2}")
